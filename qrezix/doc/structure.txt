Structure interne de qRezix
===========================
qRezix 1.7.x

Ce document a pour but d'expliquer la structure interne de qRezix. Cette
structure est conçue dans le but de rendre qRezix facile à développer, et le
plus adaptable possible à la volonté de l'utilisateur.

Au moment où je rédige ce document, la structure n'est pas encore totalement
mise en place, il s'agit donc uniquement d'un plan de travail IMPERATIF.

Le principe est une base solide et portable qui gère essentiellement la liste
des connectés. Sur cette base viennent se pluguer des modules, chacun ayant
une utilité particulière :
* interface graphique principale
* interface graphique de chat
* interface utilisateur via systray
* interface de chargement de modules externes

Les modules internes sont choisis de part leur utilité fréquente, mais il
doivent vivrent de manière indépendante et doivent donc être supprimables par
la simple désactivation de la construction systématique de l'objet.

I - Schéma global
=================
                               
                                           Utilisateur...
                               |_________________________________|
                               /                |                \
                              /                 |                 \
                           .....              .....              .....
                          /                                           \
                                           Interfaces...
                          \.....              .....              ...../
                               \                |                /
                                \               |               /
                            _____\______________|______________/____
 2 - Gestion interfaces    /                                        \
            |                     RzxApplication <--> RzxConfig...
1 - qRezix Core (public)             |
            |                RzxConnectionLister <--> RzxComputer
   3 - Gestion réseau      \________________________________________/
		                  |             |             |
                                  |             |             |
			       ...|.............|.............|...
                              /                                   \
                                   Gestion de protocoles réseau    
			      \.................................../

1 - les qRezix core classes sont le coeur de qRezix et implémente dans un
petit nombre de classe le minimum pour le fonctionnement du programme. Les 5
classes que comporte ce coeur contiennent toutes les fonctions pour que les 
différents modules de qRezix possède un accès à toutes les données dont
dispose le programme.

Ces différentes classes sont :
 * RzxApplication : contient quelques informations sur l'application, sert
principalement de lien principal entre les différents modules du programmes.
 * RzxConfig : met à disposition des données de configurations et des
informations sur la session courante du programme.
 * RzxIconCollection : gère les thèmes d'icône.
 * RzxComputer : identifie un ordinateur avec les informations qui le
constitue (nom, remarque, serveurs disponibles...). Un composant spéciale
identifie la machine locale.
 * RzxConnectionLister : Liste les machines connues et met à disposition des
fonction pour identifier une machine par son nom ou son ip, et également des
signaux indiquant les connexions, déconnexions...

2 - Les interfaces sont les modules qui utilisent les informations de qRezix.
Ces interfaces sont principalement destinées à fournir une interface
utilisateur mais ceci n'est absolument pas nécessaire.
	Les interfaces peuvent (ou pourront à terme) être soit compilées dans le
programme (built-in) soient distribuée séparément (plug-in). Dans les 2 cas,
elles doivent offrir une unique classe dont la simple non-construction permet
de désactiver l'interface. L'interface implémente également un certain nombre
de fonctions mettant en place une interactivité avec qRezix.
	Les interfaces ont la possibilité d'intéragir en elles sous certaines
conditions (fournir une liste d'actions...)... attention à la gestion des
threads !

Quelques modules déjà connus sont :
 * la fenêtre principale de qRezix
 * la trayicon
 * le chat
 * ...

3 - La gestion du réseau (dans le sens de la connexion avec le serveur) est
dédiée à des modules séparés qui dans un premier devraient restés built-in. Le
seul impératif est d'utiliser un certains nombre de signaux pour indiquer les
différentes actions requisent par le serveur, et des slots pour au contraire
permettre d'informer le serveur.
