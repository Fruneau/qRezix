Binary file dnsvalidator.moc.o matches
main.cpp:	QObject::connect(rezix->tray,SIGNAL(clicked(const QPoint&)),rezix,SLOT(toggleVisible()));
main.cpp:	QObject::connect(rezix,SIGNAL(setToolTip(const QString &)),rezix->tray,SLOT(setToolTip(const QString &)));
Binary file main.o matches
Binary file qrezix matches
qrezix.cpp:	connect((QObject *) btnPreferences, SIGNAL(clicked()), this, SLOT(boitePreferences()));
qrezix.cpp:	connect((QObject *) btnMAJcolonnes, SIGNAL(clicked()), rezal, SLOT(adapteColonnes()));
qrezix.cpp:	connect((QObject *) btnAutoResponder, SIGNAL(clicked()), this, SLOT(toggleAutoResponder()));
qrezix.cpp:	connect((QObject *) btnFavorites, SIGNAL(clicked()), this, SLOT(activateFavorites()));
qrezix.cpp:	connect(RzxClientListener::object(), SIGNAL(chatSent()), this, SLOT(chatSent()));
qrezix.cpp:	connect(rezal, SIGNAL(status(const QString&,bool)), this, SLOT(status(const QString&, bool)));
qrezix.cpp:	connect(rezal, SIGNAL(countChange(const QString&)), lblCount, SLOT(setText(const QString&)));
qrezix.cpp:	connect(rezal, SIGNAL(countChange(const QString&)), this, SIGNAL(setToolTip(const QString&)));
qrezix.cpp:		connect(rezal, SIGNAL(socketClosed()), this, SLOT(socketClosed()));
qrezix.cpp:	disconnect(m_properties, SIGNAL(end()), this, SLOT(delayedInit()));
Binary file qrezix.moc.o matches
Binary file qrezix.o matches
Binary file qrezixui.o matches
rzxchat.cpp:	accel -> connectItem(100, btnSend, SIGNAL(clicked()));
rzxchat.cpp:	accel -> connectItem(101, btnSend, SIGNAL(clicked()));
rzxchat.cpp://	accel -> connectItem(103, this, SLOT(onShiftReturnPressed()));
rzxchat.cpp:	//accel -> connectItem(104, this, SLOT(onShiftReturnPressed()));
rzxchat.cpp:	accel -> connectItem(102, btnClose, SIGNAL(clicked()));
rzxchat.cpp:  connect( timer, SIGNAL(timeout()),this, SLOT(messageReceived()) );
rzxchat.cpp:	connect(btnSend, SIGNAL(clicked()), this, SLOT(btnSendClicked()));
rzxchat.cpp:	connect(btnClose, SIGNAL(clicked()), this, SLOT(close()));
rzxchat.cpp:	connect(btnHistorique, SIGNAL(clicked()), this, SLOT(btnHistoriqueClicked()));
rzxchat.cpp:	connect(btnProperties, SIGNAL(clicked()), this, SLOT(btnPropertiesClicked()));
rzxchat.cpp:	connect(edMsg, SIGNAL(enterPressed()), this, SLOT(onReturnPressed()));
rzxchat.cpp:	connect(btnSound, SIGNAL(toggled(bool)), this, SLOT(soundToggled(bool)));
Binary file rzxchat.moc.o matches
Binary file rzxchat.o matches
Binary file rzxchatui.o matches
rzxclientlistener.cpp:	connect(notify, SIGNAL(activated(int)), SLOT(socketRead(int)));
Binary file rzxclientlistener.moc.o matches
Binary file rzxclientlistener.o matches
Binary file rzxcomputer.moc.o matches
rzxconfig.cpp:/** Renvoie le temps de reconnection en ms, 0 pour pas de reconnection */
rzxconfig.cpp:int RzxConfig::reconnection(){ return globalConfig() -> readEntry("reconnection", DEFAULT_RECONNECTION); }
rzxconfig.cpp:/** Renvoie le temps de reconnection en ms, 0 pour pas de reconnection */
rzxconfig.cpp~:/** Renvoie le temps de reconnection en ms, 0 pour pas de reconnection */
rzxconfig.cpp~:int RzxConfig::reconnection(){ return globalConfig() -> readEntry("reconnection", DEFAULT_RECONNECTION); }
rzxconfig.cpp~:/** Renvoie le temps de reconnection en ms, 0 pour pas de reconnection */
rzxconfig.h:	static int reconnection();
rzxconfig.h~:	static int reconnection();
Binary file rzxconfig.moc.o matches
Binary file rzxconfig.o matches
Binary file rzxitem.moc.o matches
rzxproperty.cpp:	connect( btnBrowseWorkDir, SIGNAL( clicked() ), this, SLOT( launchDirSelectDialog() ) );
rzxproperty.cpp:	connect( btnMiseAJour, SIGNAL( clicked() ), this, SLOT( miseAJour() ) );
rzxproperty.cpp:	connect( btnAnnuler, SIGNAL( clicked() ), this, SLOT( annuler() ) );
rzxproperty.cpp:	connect( btnOK, SIGNAL( clicked() ), this, SLOT( oK() ) );
rzxproperty.cpp:	connect( btnBrowse, SIGNAL( clicked() ), this, SLOT( chooseIcon() ) );
rzxproperty.cpp:	connect( btnBeepBrowse, SIGNAL( clicked() ), this, SLOT( chooseBeep() ) );
rzxproperty.cpp:	connect( chkBeep, SIGNAL(toggled(bool)), btnBeepBrowse, SLOT(setEnabled(bool)));
rzxproperty.cpp:	connect( chkBeep, SIGNAL(toggled(bool)), txtBeep, SLOT(setEnabled(bool)));
rzxproperty.cpp:	reconnection->setValue( RzxConfig::reconnection() / 1000 );
rzxproperty.cpp:	cfgObject -> writeEntry( "reconnection", reconnection->value() * 1000 );
rzxproperty.cpp~:	connect( btnBrowseWorkDir, SIGNAL( clicked() ), this, SLOT( launchDirSelectDialog() ) );
rzxproperty.cpp~:	connect( btnMiseAJour, SIGNAL( clicked() ), this, SLOT( miseAJour() ) );
rzxproperty.cpp~:	connect( btnAnnuler, SIGNAL( clicked() ), this, SLOT( annuler() ) );
rzxproperty.cpp~:	connect( btnOK, SIGNAL( clicked() ), this, SLOT( oK() ) );
rzxproperty.cpp~:	connect( btnBrowse, SIGNAL( clicked() ), this, SLOT( chooseIcon() ) );
rzxproperty.cpp~:	connect( btnBeepBrowse, SIGNAL( clicked() ), this, SLOT( chooseBeep() ) );
rzxproperty.cpp~:	connect( chkBeep, SIGNAL(toggled(bool)), btnBeepBrowse, SLOT(setEnabled(bool)));
rzxproperty.cpp~:	connect( chkBeep, SIGNAL(toggled(bool)), txtBeep, SLOT(setEnabled(bool)));
rzxproperty.cpp~:	reconnection->setValue( RzxConfig::reconnection() / 1000 );
rzxproperty.cpp~:	cfgObject -> writeEntry( "reconnection", reconnection->value() * 1000 );
Binary file rzxproperty.moc.o matches
Binary file rzxproperty.o matches
rzxpropertyui.cpp:    grpReconnect = new QGroupBox( avancees, "grpReconnect" );
rzxpropertyui.cpp:    grpReconnect->setColumnLayout(0, Qt::Vertical );
rzxpropertyui.cpp:    grpReconnect->layout()->setSpacing( 6 );
rzxpropertyui.cpp:    grpReconnect->layout()->setMargin( 11 );
rzxpropertyui.cpp:    grpReconnectLayout = new QGridLayout( grpReconnect->layout() );
rzxpropertyui.cpp:    grpReconnectLayout->setAlignment( Qt::AlignTop );
rzxpropertyui.cpp:    lblReconnection = new QLabel( grpReconnect, "lblReconnection" );
rzxpropertyui.cpp:    grpReconnectLayout->addWidget( lblReconnection, 1, 0 );
rzxpropertyui.cpp:    lblPingTimeout = new QLabel( grpReconnect, "lblPingTimeout" );
rzxpropertyui.cpp:    grpReconnectLayout->addWidget( lblPingTimeout, 0, 0 );
rzxpropertyui.cpp:    reconnection = new QSpinBox( grpReconnect, "reconnection" );
rzxpropertyui.cpp:    reconnection->setMaxValue( 32768 );
rzxpropertyui.cpp:    reconnection->setMinValue( 30 );
rzxpropertyui.cpp:    reconnection->setValue( 60 );
rzxpropertyui.cpp:    grpReconnectLayout->addWidget( reconnection, 1, 1 );
rzxpropertyui.cpp:    ping_timeout = new QSpinBox( grpReconnect, "ping_timeout" );
rzxpropertyui.cpp:    grpReconnectLayout->addWidget( ping_timeout, 0, 1 );
rzxpropertyui.cpp:    avanceesLayout->addWidget( grpReconnect, 1, 0 );
rzxpropertyui.cpp:    setTabOrder( ping_timeout, reconnection );
rzxpropertyui.cpp:    setTabOrder( reconnection, CbSamba );
rzxpropertyui.cpp:    grpReconnect->setTitle( tr2i18n( "Reconnection" ) );
rzxpropertyui.cpp:    lblReconnection->setText( tr2i18n( "Auto-reconnect delay:" ) );
rzxpropertyui.h:    QGroupBox* grpReconnect;
rzxpropertyui.h:    QLabel* lblReconnection;
rzxpropertyui.h:    QSpinBox* reconnection;
rzxpropertyui.h:    QGridLayout* grpReconnectLayout;
Binary file rzxpropertyui.o matches
rzxpropertyui.ui:                            <cstring>grpReconnect</cstring>
rzxpropertyui.ui:                            <string>Reconnection</string>
rzxpropertyui.ui:                                    <cstring>lblReconnection</cstring>
rzxpropertyui.ui:                                    <string>Auto-reconnect delay:</string>
rzxpropertyui.ui:                                    <cstring>reconnection</cstring>
rzxpropertyui.ui:    <tabstop>reconnection</tabstop>
rzxprotocole.h:	/** Envoie le message de deconnection */
rzxprotocole.h:	*@param ip IP de l'ordinateur qui se deconnecte de rezix */
Binary file rzxprotocole.moc.o matches
rzxrezal.cpp:	connect(server, SIGNAL(sysmsg(const QString&)), this, SLOT(sysmsg(const QString&)));
rzxrezal.cpp:	connect(server, SIGNAL(fatal(const QString&)), this, SLOT(fatal(const QString&)));
rzxrezal.cpp:	connect(server, SIGNAL(pass(int)), this, SLOT(passReceived(int)));
rzxrezal.cpp:	connect(server, SIGNAL(login(const QString&)), this, SLOT(login(const QString&)));
rzxrezal.cpp:	connect(server, SIGNAL(logout(const RzxHostAddress&)), this, SLOT(logout(const RzxHostAddress&)));
rzxrezal.cpp:	connect(server, SIGNAL(rcvIcon(QImage*,const RzxHostAddress&)), this, SLOT(recvIcon(QImage*,const RzxHostAddress&)));
rzxrezal.cpp:	connect(server, SIGNAL(disconnected()), this, SLOT(serverDisconnected()));
rzxrezal.cpp:	connect(this, SIGNAL(needIcon(const RzxHostAddress&)), server, SLOT(getIcon(const RzxHostAddress&)));
rzxrezal.cpp:	connect(server, SIGNAL(status(const QString&, bool)), this, SIGNAL(status(const QString&, bool)));
rzxrezal.cpp:	connect(server, SIGNAL(connected()), this, SLOT(serverConnected()));
rzxrezal.cpp:	connect(this, SIGNAL(doubleClicked(QListViewItem *)),
rzxrezal.cpp:	connect(this, SIGNAL(pressed(QListViewItem *, const QPoint &, int)),
rzxrezal.cpp:	connect(client, SIGNAL(chat(const RzxHostAddress&, const QString&)),
rzxrezal.cpp:	connect(client, SIGNAL(propAnswer(const RzxHostAddress&, const QString&)), this, SLOT(showProperties(const RzxHostAddress&, const QString&)));
rzxrezal.cpp:	connect(client, SIGNAL(propQuery(const RzxHostAddress&)), RzxClientListener::object(), SLOT(sendProperties(const RzxHostAddress&)));
rzxrezal.cpp:	connect(server, SIGNAL(disconnected()), this, SIGNAL(socketClosed()));
rzxrezal.cpp:	connect(this,SIGNAL(rightButtonPressed(QListViewItem *,const QPoint &,int )),this,SLOT(creePopUpMenu(QListViewItem *,const QPoint &,int )));
rzxrezal.cpp:	connect(this, SIGNAL(spacePressed(QListViewItem *)), this, SLOT(chatCreate()));
rzxrezal.cpp:		if(serveurs & 1) popup.insertItem(tr("Samba connect"),this,SLOT(samba()));
rzxrezal.cpp:		if((serveurs>>1) & 1) popup.insertItem(tr("FTP connect"), this, SLOT(ftp()));
rzxrezal.cpp:  connect(newComputer, SIGNAL(needIcon(const RzxHostAddress&)), this, SIGNAL(needIcon(const RzxHostAddress&)));
rzxrezal.cpp:  connect(newComputer, SIGNAL(isUpdated()), item, SLOT(update()));
rzxrezal.cpp:  emit countChange(tr("%1 clients connected").arg(iplist.count()));
rzxrezal.cpp:                emit countChange(tr("%1 clients connected").arg(iplist.count()));
rzxrezal.cpp:		connect(object, SIGNAL(closed(const RzxHostAddress&)), this, SLOT(chatDelete(const RzxHostAddress&)));
rzxrezal.cpp:		connect(object, SIGNAL(send(const RzxHostAddress&, const QString&)), 
rzxrezal.cpp:		connect(object, SIGNAL(showHistorique(unsigned long, QString)), this, SLOT(showHistorique(unsigned long, QString)));
rzxrezal.cpp:		connect(object, SIGNAL(askProperties(const RzxHostAddress&)), this, SLOT(proprietes(const RzxHostAddress&)));
rzxrezal.cpp:void RzxRezal::serverDisconnected(){        
rzxrezal.cpp:        disconnect(server, SIGNAL(disconnected()), this, SLOT(serverDisconnected()));
rzxrezal.h:	void serverDisconnected();
rzxrezal.moc.cpp:    static const QUMethod slot_26 = {"serverDisconnected", 0, 0 };
rzxrezal.moc.cpp:	{ "serverDisconnected()", &slot_26, QMetaData::Public },
rzxrezal.moc.cpp:    case 26: serverDisconnected(); break;
Binary file rzxrezal.moc.o matches
Binary file rzxrezal.o matches
rzxserverlistener.cpp:	connect(&reconnection, SIGNAL(timeout()), this, SLOT(slotConnect()));	
rzxserverlistener.cpp:	connect(this, SIGNAL(ping()), this, SLOT(sendPong()));
rzxserverlistener.cpp:	connect(this, SIGNAL(ping()), this, SLOT(serverResetTimer()));
rzxserverlistener.cpp:	connect(&socket, SIGNAL(bytesWritten(int)), this, SLOT(serverResetTimer()));
rzxserverlistener.cpp:	connect(&socket, SIGNAL(readyRead()), this, SLOT(serverResetTimer()));
rzxserverlistener.cpp:	connect(this, SIGNAL(send(const QString&)), this, SLOT(sendProtocolMsg(const QString&)));
rzxserverlistener.cpp:	connect(&socket, SIGNAL(connectionClosed()), this, SLOT(serverClose()));
rzxserverlistener.cpp:	connect(&socket, SIGNAL(error(int)), this, SLOT(serverError(int)));
rzxserverlistener.cpp:	connect(&socket, SIGNAL(readyRead()), this, SLOT(serverReceive()));
rzxserverlistener.cpp:	connect(&socket, SIGNAL(hostFound()), this, SLOT(serverFound()));
rzxserverlistener.cpp:	connect(&socket, SIGNAL(connected()), this, SLOT(serverConnected()));
rzxserverlistener.cpp:	connect(&socket, SIGNAL(connected()), this, SLOT(beginAuth()));
rzxserverlistener.cpp:	connect(&socket, SIGNAL(delayedCloseFinished()), this, SIGNAL(disconnected()));
rzxserverlistener.cpp:	connect(&socket, SIGNAL(connectionClosed()), this, SIGNAL(disconnected()));
rzxserverlistener.cpp:	connect(&socket, SIGNAL(error(int)), this, SIGNAL(disconnected()));
rzxserverlistener.cpp:	connect(&socket, SIGNAL(connected()), this, SIGNAL(connected()));
rzxserverlistener.cpp:	connect (&pingTimer, SIGNAL(timeout()), this, SLOT(serverTimeout()));
rzxserverlistener.cpp:void RzxServerListener::setupReconnection(const QString& msg, bool fatal) {
rzxserverlistener.cpp:	emit disconnected();
rzxserverlistener.cpp:	int time = RzxConfig::reconnection();
rzxserverlistener.cpp:		reconnection.changeInterval(500);
rzxserverlistener.cpp:		temp = msg + tr("Will try to reconnect in %1 seconds").arg(time/1000);
rzxserverlistener.cpp:		reconnection.changeInterval(time);
rzxserverlistener.cpp:		setupReconnection(tr("Connexion refused"),true);
rzxserverlistener.cpp:		setupReconnection(tr("Socket error"), true);
rzxserverlistener.cpp:		setupReconnection(tr("Unknown QSocket error: %1").arg(error), true);
rzxserverlistener.cpp:	setupReconnection(tr("Connection closed"), true);
rzxserverlistener.cpp:	setupReconnection(tr("Connection lost"), true);
rzxserverlistener.cpp:	reconnection.stop();
rzxserverlistener.cpp:	socket.connectToHost(serverHostname, serverPort);	
rzxserverlistener.cpp:		socket.connectToHost(addr, RzxConfig::serverPort());	
rzxserverlistener.cpp:	emit status(tr("Server found, trying to connect"), false);
rzxserverlistener.cpp:		QMessageBox::critical(0, tr("qReziX error"), tr("Configuration error, cannot connect"));
rzxserverlistener.cpp:	disconnect(&socket, SIGNAL(connectionClosed()), this, SLOT(serverClose()));
rzxserverlistener.cpp:	disconnect(&socket, SIGNAL(error(int)), this, SLOT(serverError(int)));
rzxserverlistener.cpp:		emit disconnected();
rzxserverlistener.cpp:	connect(&socket, SIGNAL(bytesWritten(int)), this, SLOT(closeWaitFlush(int)));
rzxserverlistener.cpp:		emit disconnected();
rzxserverlistener.h:	void setupReconnection(const QString& msg, bool fatal);
rzxserverlistener.h:	void connected();
rzxserverlistener.h:	void disconnected();
rzxserverlistener.h:	/** Timer utilis�pour les reconnections automatiques */
rzxserverlistener.h:	QTimer reconnection;
rzxserverlistener.moc.cpp:    static const QUMethod signal_2 = {"connected", 0, 0 };
rzxserverlistener.moc.cpp:    static const QUMethod signal_3 = {"disconnected", 0, 0 };
rzxserverlistener.moc.cpp:	{ "connected()", &signal_2, QMetaData::Protected },
rzxserverlistener.moc.cpp:	{ "disconnected()", &signal_3, QMetaData::Protected }
rzxserverlistener.moc.cpp:// SIGNAL connected
rzxserverlistener.moc.cpp:void RzxServerListener::connected()
rzxserverlistener.moc.cpp:// SIGNAL disconnected
rzxserverlistener.moc.cpp:void RzxServerListener::disconnected()
rzxserverlistener.moc.cpp:    case 2: connected(); break;
rzxserverlistener.moc.cpp:    case 3: disconnected(); break;
Binary file rzxserverlistener.moc.o matches
Binary file rzxserverlistener.o matches
Binary file trayicon.moc.o matches
Binary file trayicon.o matches
